-- MySQL Script generated by MySQL Workbench
-- 05/25/16 18:15:19
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema KBPS_SYSTEM
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `KBPS_SYSTEM` ;

-- -----------------------------------------------------
-- Schema KBPS_SYSTEM
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `KBPS_SYSTEM` DEFAULT CHARACTER SET utf8 ;
-- -----------------------------------------------------
-- Schema user_management
-- -----------------------------------------------------
-- 
-- 
DROP SCHEMA IF EXISTS `user_management` ;

-- -----------------------------------------------------
-- Schema user_management
--
-- 
-- 
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `user_management` ;
USE `KBPS_SYSTEM` ;

-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`disease`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`disease` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`disease` (
  `Management` VARCHAR(1024) NULL,
  `Name` VARCHAR(128) NOT NULL,
  `Epidemiology` VARCHAR(1024) NULL,
  `Category` VARCHAR(128) NULL,
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Description` VARCHAR(1024) NULL,
  `Causes` VARCHAR(1024) NULL,
  `Diagnosis` VARCHAR(1024) NULL,
  `Mechanism` VARCHAR(1024) NULL,
  `Prognosis` VARCHAR(1024) NULL,
  `Prevention` VARCHAR(1024) NULL,
  PRIMARY KEY (`ID`),
  INDEX `index2` (`Name` ASC),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`medicine`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`medicine` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`medicine` (
  `Name` VARCHAR(128) NOT NULL,
  `Category` VARCHAR(128) NULL,
  `Description` VARCHAR(1024) NULL,
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Property` VARCHAR(1024) NULL,
  `Adverse_effect` VARCHAR(1024) NULL,
  `Pharmacokinetics` VARCHAR(1024) NULL,
  `Mechanism` VARCHAR(1024) NULL,
  PRIMARY KEY (`ID`),
  INDEX `index2` (`Name` ASC),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`symptom`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`symptom` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`symptom` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(128) NOT NULL,
  `Category` VARCHAR(128) NULL,
  `Description` VARCHAR(1024) NULL,
  PRIMARY KEY (`ID`),
  INDEX `index2` (`Name` ASC),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`Incompatibility`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`Incompatibility` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`Incompatibility` (
  `medicine ID` INT NOT NULL,
  `medicine_ID2` INT NOT NULL,
  PRIMARY KEY (`medicine ID`, `medicine_ID2`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`doctor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`doctor` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`doctor` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(128) NOT NULL,
  `Gender` CHAR(1) NOT NULL,
  `Specialty` VARCHAR(128) NULL,
  `Phone` VARCHAR(32) NULL,
  `Age` INT NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`patient`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`patient` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`patient` (
  `Gender` CHAR(1) NOT NULL,
  `Phone` VARCHAR(32) NULL,
  `Name` VARCHAR(128) NOT NULL,
  `Age` INT NOT NULL,
  `ID` INT NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`prescription`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`prescription` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`prescription` (
  `Date` DATE NOT NULL,
  `Content` VARCHAR(1024) NULL,
  `ID` INT NOT NULL AUTO_INCREMENT,
  `doctor_ID` INT NOT NULL,
  `patient_ID` INT NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_prescription_doctor1_idx` (`doctor_ID` ASC),
  INDEX `fk_prescription_patient1_idx` (`patient_ID` ASC),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC),
  CONSTRAINT `fk_prescription_doctor1`
    FOREIGN KEY (`doctor_ID`)
    REFERENCES `KBPS_SYSTEM`.`doctor` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_prescription_patient1`
    FOREIGN KEY (`patient_ID`)
    REFERENCES `KBPS_SYSTEM`.`patient` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`Dise_med`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`Dise_med` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`Dise_med` (
  `disease_ID` INT NOT NULL,
  `medicine_ID` INT NOT NULL,
  PRIMARY KEY (`disease_ID`, `medicine_ID`),
  INDEX `fk_disease_has_medicine_medicine1_idx` (`medicine_ID` ASC),
  INDEX `fk_disease_has_medicine_disease_idx` (`disease_ID` ASC),
  CONSTRAINT `fk_disease_has_medicine_disease`
    FOREIGN KEY (`disease_ID`)
    REFERENCES `KBPS_SYSTEM`.`disease` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_disease_has_medicine_medicine1`
    FOREIGN KEY (`medicine_ID`)
    REFERENCES `KBPS_SYSTEM`.`medicine` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`dise_symp`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`dise_symp` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`dise_symp` (
  `disease_ID` INT NOT NULL,
  `symptom_ID` INT NOT NULL,
  PRIMARY KEY (`disease_ID`, `symptom_ID`),
  INDEX `fk_disease_has_symptom_symptom1_idx` (`symptom_ID` ASC),
  INDEX `fk_disease_has_symptom_disease1_idx` (`disease_ID` ASC),
  CONSTRAINT `fk_disease_has_symptom_disease1`
    FOREIGN KEY (`disease_ID`)
    REFERENCES `KBPS_SYSTEM`.`disease` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_disease_has_symptom_symptom1`
    FOREIGN KEY (`symptom_ID`)
    REFERENCES `KBPS_SYSTEM`.`symptom` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`symp_presc`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`symp_presc` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`symp_presc` (
  `prescription_ID` INT NOT NULL,
  `symptom_ID` INT NOT NULL,
  PRIMARY KEY (`prescription_ID`, `symptom_ID`),
  INDEX `fk_prescription_has_symptom_symptom1_idx` (`symptom_ID` ASC),
  INDEX `fk_prescription_has_symptom_prescription1_idx` (`prescription_ID` ASC),
  CONSTRAINT `fk_prescription_has_symptom_prescription1`
    FOREIGN KEY (`prescription_ID`)
    REFERENCES `KBPS_SYSTEM`.`prescription` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_prescription_has_symptom_symptom1`
    FOREIGN KEY (`symptom_ID`)
    REFERENCES `KBPS_SYSTEM`.`symptom` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`presc_med`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`presc_med` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`presc_med` (
  `prescription_ID` INT NOT NULL,
  `medicine_ID` INT NOT NULL,
  `amount` INT NOT NULL,
  PRIMARY KEY (`prescription_ID`, `medicine_ID`),
  INDEX `fk_prescription_has_medicine_medicine1_idx` (`medicine_ID` ASC),
  INDEX `fk_prescription_has_medicine_prescription1_idx` (`prescription_ID` ASC),
  CONSTRAINT `fk_prescription_has_medicine_prescription1`
    FOREIGN KEY (`prescription_ID`)
    REFERENCES `KBPS_SYSTEM`.`prescription` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_prescription_has_medicine_medicine1`
    FOREIGN KEY (`medicine_ID`)
    REFERENCES `KBPS_SYSTEM`.`medicine` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`dise_presc`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`dise_presc` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`dise_presc` (
  `prescription_ID` INT NOT NULL,
  `disease_ID` INT NOT NULL,
  PRIMARY KEY (`prescription_ID`, `disease_ID`),
  INDEX `fk_prescription_has_disease_disease1_idx` (`disease_ID` ASC),
  INDEX `fk_prescription_has_disease_prescription1_idx` (`prescription_ID` ASC),
  CONSTRAINT `fk_prescription_has_disease_prescription1`
    FOREIGN KEY (`prescription_ID`)
    REFERENCES `KBPS_SYSTEM`.`prescription` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_prescription_has_disease_disease1`
    FOREIGN KEY (`disease_ID`)
    REFERENCES `KBPS_SYSTEM`.`disease` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`symp_med`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`symp_med` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`symp_med` (
  `medicine_ID` INT NOT NULL,
  `symptom_ID` INT NOT NULL,
  PRIMARY KEY (`medicine_ID`, `symptom_ID`),
  INDEX `fk_medicine_has_symptom_symptom1_idx` (`symptom_ID` ASC),
  INDEX `fk_medicine_has_symptom_medicine1_idx` (`medicine_ID` ASC),
  CONSTRAINT `fk_medicine_has_symptom_medicine1`
    FOREIGN KEY (`medicine_ID`)
    REFERENCES `KBPS_SYSTEM`.`medicine` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_medicine_has_symptom_symptom1`
    FOREIGN KEY (`symptom_ID`)
    REFERENCES `KBPS_SYSTEM`.`symptom` (`ID`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`incompatibility`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`incompatibility` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`incompatibility` (
  `medicine_ID` INT NOT NULL,
  `medicine_ID1` INT NOT NULL,
  PRIMARY KEY (`medicine_ID`, `medicine_ID1`),
  INDEX `fk_medicine_has_medicine_medicine2_idx` (`medicine_ID1` ASC),
  INDEX `fk_medicine_has_medicine_medicine1_idx` (`medicine_ID` ASC),
  CONSTRAINT `fk_medicine_has_medicine_medicine1`
    FOREIGN KEY (`medicine_ID`)
    REFERENCES `KBPS_SYSTEM`.`medicine` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_medicine_has_medicine_medicine2`
    FOREIGN KEY (`medicine_ID1`)
    REFERENCES `KBPS_SYSTEM`.`medicine` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KBPS_SYSTEM`.`system_log`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`system_log` ;

CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`system_log` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `time` VARCHAR(40) NULL,
  `operation` VARCHAR(45) NOT NULL,
  `operator` VARCHAR(45) NULL DEFAULT 'admin',
  `medicine_name/diease_name/doctor_name/` VARCHAR(128) NOT NULL,
  `type` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `index2` (`medicine_name/diease_name/doctor_name/` ASC),
  INDEX `index3` (`operation` ASC),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC))
ENGINE = InnoDB;

USE `user_management` ;

-- -----------------------------------------------------
-- Table `user_management`.`login_info`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `user_management`.`login_info` ;

CREATE TABLE IF NOT EXISTS `user_management`.`login_info` (
  `ID` INT NOT NULL,
  `user_name` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  `role` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;

USE `KBPS_SYSTEM` ;

-- -----------------------------------------------------
-- Placeholder table for view `KBPS_SYSTEM`.`billing_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`billing_view` (`patient_ID` INT, `medicine_ID` INT, `medicine_account` INT);

-- -----------------------------------------------------
-- Placeholder table for view `KBPS_SYSTEM`.`medicine_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KBPS_SYSTEM`.`medicine_view` (`Name` INT, `Description` INT, `Property` INT, `Adverse_effect` INT, `Mechanism` INT);

-- -----------------------------------------------------
-- View `KBPS_SYSTEM`.`billing_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `KBPS_SYSTEM`.`billing_view` ;
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`billing_view`;
USE `KBPS_SYSTEM`;
CREATE  OR REPLACE VIEW billing_view(patient_ID,medicine_ID,medicine_account) AS
SELECT prescription.patient_ID,presc_med.medicine_ID,presc_med.amount 
FROM prescription,presc_med
WHERE prescription.ID=presc_med.prescription_ID;

-- -----------------------------------------------------
-- View `KBPS_SYSTEM`.`medicine_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `KBPS_SYSTEM`.`medicine_view` ;
DROP TABLE IF EXISTS `KBPS_SYSTEM`.`medicine_view`;
USE `KBPS_SYSTEM`;
CREATE  OR REPLACE VIEW medicine_view AS
select Name,Description,Property,Adverse_effect,Mechanism
from medicine;
USE `KBPS_SYSTEM`;

DELIMITER $$

USE `KBPS_SYSTEM`$$
DROP TRIGGER IF EXISTS `KBPS_SYSTEM`.`disease_AFTER_INSERT` $$
USE `KBPS_SYSTEM`$$
CREATE DEFINER = CURRENT_USER TRIGGER `KBPS_SYSTEM`.`disease_AFTER_INSERT` 
AFTER INSERT ON `disease`
 /*REFERENCING NEW ROW AS New*/
FOR EACH ROW
      INSERT INTO `system_log` (`ID`, `time`, `operation`, `operator`, `medicine_name/diease_name/doctor_name/`, `type`) 
      VALUES (NULL,CURRENT_DATE, 'INSERT', 'admin', NEW.Name, 'DIEASE');$$


USE `KBPS_SYSTEM`$$
DROP TRIGGER IF EXISTS `KBPS_SYSTEM`.`disease_AFTER_UPDATE` $$
USE `KBPS_SYSTEM`$$
CREATE DEFINER = CURRENT_USER TRIGGER `KBPS_SYSTEM`.`disease_AFTER_UPDATE` 
AFTER UPDATE ON `disease` 
FOR EACH ROW
      INSERT INTO `system_log` (`ID`, `time`, `operation`, `operator`, `medicine_name/diease_name/doctor_name/`, `type`) 
      VALUES (NULL, CURRENT_DATE, 'UPDATE', 'admin', NEW.Name, 'DIEASE');$$


USE `KBPS_SYSTEM`$$
DROP TRIGGER IF EXISTS `KBPS_SYSTEM`.`disease_AFTER_DELETE` $$
USE `KBPS_SYSTEM`$$
CREATE DEFINER = CURRENT_USER TRIGGER `KBPS_SYSTEM`.`disease_AFTER_DELETE` 
AFTER DELETE ON `disease` 
FOR EACH ROW
      INSERT INTO `system_log` (`ID`, `time`, `operation`, `operator`, `medicine_name/diease_name/doctor_name/`, `type`) 
      VALUES (NULL, CURRENT_DATE, 'DELETE', 'admin', OLD.Name, 'DIEASE');$$


USE `KBPS_SYSTEM`$$
DROP TRIGGER IF EXISTS `KBPS_SYSTEM`.`medicine_AFTER_INSERT` $$
USE `KBPS_SYSTEM`$$
CREATE DEFINER = CURRENT_USER TRIGGER `KBPS_SYSTEM`.`medicine_AFTER_INSERT` 
AFTER INSERT ON `medicine` 
 /*REFERENCING NEW ROW AS New*/
FOR EACH ROW
      INSERT INTO `system_log` (`ID`, `time`, `operation`, `operator`, `medicine_name/diease_name/doctor_name/`, `type`) 
      VALUES (NULL,CURRENT_DATE, 'INSERT', 'admin', New.Name, 'MEDICNE');$$


USE `KBPS_SYSTEM`$$
DROP TRIGGER IF EXISTS `KBPS_SYSTEM`.`medicine_AFTER_UPDATE` $$
USE `KBPS_SYSTEM`$$
CREATE DEFINER = CURRENT_USER TRIGGER `KBPS_SYSTEM`.`medicine_AFTER_UPDATE`
AFTER UPDATE ON `medicine` 
 /*REFERENCING NEW ROW AS New*/
FOR EACH ROW
      INSERT INTO `system_log` (`ID`, `time`, `operation`, `operator`, `medicine_name/diease_name/doctor_name/`, `type`) 
      VALUES (NULL,CURRENT_DATE, 'UPDATE', 'admin', New.Name, 'MEDICNE');$$


USE `KBPS_SYSTEM`$$
DROP TRIGGER IF EXISTS `KBPS_SYSTEM`.`medicine_AFTER_DELETE` $$
USE `KBPS_SYSTEM`$$
CREATE DEFINER = CURRENT_USER TRIGGER `KBPS_SYSTEM`.`medicine_AFTER_DELETE`
AFTER DELETE ON `medicine` 
FOR EACH ROW
      INSERT INTO `system_log` (`ID`, `time`, `operation`, `operator`, `medicine_name/diease_name/doctor_name/`, `type`) 
      VALUES (NULL,CURRENT_DATE, 'DELETE', 'admin', OLD.Name, 'MEDICNE');$$


USE `KBPS_SYSTEM`$$
DROP TRIGGER IF EXISTS `KBPS_SYSTEM`.`doctor_AFTER_INSERT` $$
USE `KBPS_SYSTEM`$$
CREATE DEFINER = CURRENT_USER TRIGGER `KBPS_SYSTEM`.`doctor_AFTER_INSERT` 
AFTER INSERT ON `doctor` FOR EACH ROW
      INSERT INTO `system_log` (`ID`, `time`, `operation`, `operator`, `medicine_name/diease_name/doctor_name/`, `type`) 
      VALUES (NULL,CURRENT_DATE, 'INSERT', 'admin', New.Name, 'DOCTOR');$$


USE `KBPS_SYSTEM`$$
DROP TRIGGER IF EXISTS `KBPS_SYSTEM`.`doctor_AFTER_UPDATE` $$
USE `KBPS_SYSTEM`$$
CREATE DEFINER = CURRENT_USER TRIGGER `KBPS_SYSTEM`.`doctor_AFTER_UPDATE`
 AFTER UPDATE ON `doctor` FOR EACH ROW
      INSERT INTO `system_log` (`ID`, `time`, `operation`, `operator`, `medicine_name/diease_name/doctor_name/`, `type`) 
      VALUES (NULL,CURRENT_DATE, 'UPDATE', 'admin', New.Name, 'DOCTOR');$$


USE `KBPS_SYSTEM`$$
DROP TRIGGER IF EXISTS `KBPS_SYSTEM`.`doctor_AFTER_DELETE` $$
USE `KBPS_SYSTEM`$$
CREATE DEFINER = CURRENT_USER TRIGGER `KBPS_SYSTEM`.`doctor_AFTER_DELETE` 
AFTER DELETE ON `doctor` FOR EACH ROW
      INSERT INTO `system_log` (`ID`, `time`, `operation`, `operator`, `medicine_name/diease_name/doctor_name/`, `type`) 
      VALUES (NULL,CURRENT_DATE, 'DELETE', 'admin', OLD.Name, 'DOCTOR');$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
