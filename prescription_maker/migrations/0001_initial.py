# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-05-16 17:54
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('category', models.CharField(max_length=256)),
                ('description', models.CharField(max_length=32768)),
                ('causes', models.CharField(max_length=32768, null=True)),
                ('management', models.CharField(max_length=32768, null=True)),
                ('prevention', models.CharField(max_length=32768, null=True)),
                ('mechanism', models.CharField(max_length=32768, null=True)),
                ('epidemiology', models.CharField(max_length=32768, null=True)),
                ('diagnosis', models.CharField(max_length=32768, null=True)),
                ('prognosis', models.CharField(max_length=32768, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(max_length=256)),
                ('age', models.PositiveSmallIntegerField()),
                ('gender', models.CharField(max_length=1)),
                ('phone', models.CharField(max_length=32)),
                ('specialty', models.CharField(max_length=1024, null=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('category', models.CharField(max_length=256)),
                ('description', models.CharField(max_length=32768)),
                ('properties', models.CharField(max_length=32768, null=True)),
                ('adverse_effect', models.CharField(max_length=32768, null=True)),
                ('mechanism', models.CharField(max_length=32768, null=True)),
                ('pharmacokinetics', models.CharField(max_length=32768, null=True)),
                ('diseases', models.ManyToManyField(to='prescription_maker.Disease')),
                ('incompatible_with', models.ManyToManyField(related_name='_medicine_incompatible_with_+', to='prescription_maker.Medicine')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('age', models.PositiveSmallIntegerField()),
                ('gender', models.CharField(max_length=1)),
                ('phone', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=32768)),
                ('date', models.DateTimeField()),
                ('diseases', models.ManyToManyField(to='prescription_maker.Disease')),
                ('doctor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prescription_maker.Doctor')),
                ('medicine', models.ManyToManyField(to='prescription_maker.Medicine')),
                ('patient_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prescription_maker.Patient')),
            ],
        ),
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('category', models.CharField(max_length=256)),
                ('description', models.CharField(max_length=32768)),
                ('causes', models.CharField(max_length=32768, null=True)),
                ('diseases', models.ManyToManyField(to='prescription_maker.Disease')),
                ('relate_medicine', models.ManyToManyField(to='prescription_maker.Medicine')),
            ],
        ),
        migrations.AddField(
            model_name='prescription',
            name='symptoms',
            field=models.ManyToManyField(to='prescription_maker.Symptom'),
        ),
        migrations.AddField(
            model_name='patient',
            name='prescriptions',
            field=models.ManyToManyField(to='prescription_maker.Prescription'),
        ),
        migrations.AddField(
            model_name='medicine',
            name='symptoms',
            field=models.ManyToManyField(to='prescription_maker.Symptom'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='prescriptions',
            field=models.ManyToManyField(to='prescription_maker.Prescription'),
        ),
        migrations.AddField(
            model_name='disease',
            name='relate_medicine',
            field=models.ManyToManyField(to='prescription_maker.Medicine'),
        ),
        migrations.AddField(
            model_name='disease',
            name='symptoms',
            field=models.ManyToManyField(to='prescription_maker.Symptom'),
        ),
    ]
